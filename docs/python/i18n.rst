Internationalization (i18n)
===========================

.. seealso::

   :doc:`preferences` for Internationalization (i18n)

Treat the source language as "developer" English, using the language code ``en_US``. Then, translate the "developer" English to "proper" English, using the language code ``en``.

.. note::

   If using the source language as "proper" English, then replace ``en_US`` with ``en`` in the commands and templates below.

Reference: `Non-English as a Source Language <https://help.transifex.com/en/articles/6240900-non-english-as-a-source-language>`__ (Transifex)

Install dependencies
--------------------

When using Sphinx:

.. code-block:: bash

   pip install -r docs/requirements.txt sphinx-intl

If you use a translation tool:

.. tab-set::

   .. tab-item:: Crowdin
      :sync: crowdin

      Install the `Crowdin CLI <https://support.crowdin.com/cli-tool/>`__:

      .. code-block:: bash

         npm install -g @crowdin/cli


      Set the Crowdin `personal access token <https://support.crowdin.com/enterprise/account-settings/#creating-a-personal-access-token>`__ in the ``.crowdin.yml`` file in your home directory:

      .. code-block:: yaml

          api_token: ...

   .. tab-item:: Transifex
      :sync: tx

      Install the `Transifex Client <https://developers.transifex.com/docs/cli>`__.

Mark strings to translate
-------------------------

When using Django, use its `translation functions and template tags <https://docs.djangoproject.com/en/4.2/topics/i18n/translation/>`__. Otherwise, use `gettext.gettext() <https://docs.python.org/3/library/gettext.html>`__.

.. seealso::

   :ref:`Internationalization (i18n) string formatting <string-logging-i18n>`

Configure message extraction
----------------------------

When using Django, this step is already done. Otherwise, create a `pyproject.toml file <https://babel.pocoo.org/en/latest/messages.html#extraction-method-mapping-and-configuration>`__, for example:

.. code-block:: toml

   [[tool.babel.mappings]]
   method = "python"
   pattern = "**.py"

   [[tool.babel.mappings]]
   method = "jinja2"
   pattern = "**.html"

Extract strings to translate
----------------------------

Whenever text in the interface is added or updated, you must extract the strings to translate from the code files into PO files by running:

.. tab-set::

   .. tab-item:: Django
      :sync: django

      .. code-block:: bash

         django-admin makemessages --no-obsolete -l en_US

      If you are **not** using a translation tool, update the translation files. For example:

      .. code-block:: bash

         django-admin makemessages --no-obsolete -l en -l es

   .. tab-item:: Sphinx
      :sync: sphinx

      .. code-block:: bash

         sphinx-build -nW --keep-going -q -b gettext docs/ docs/_build/gettext

      If you are **not** using a translation tool, update the translation files. For example:

      .. code-block:: bash

         sphinx-intl update -p docs/_build/gettext -d docs/locale

   .. tab-item:: Python (example)
      :sync: python

      .. code-block:: bash

         pybabel extract -F pyproject.toml -o messages.pot .
         pybabel update -N -i messages.pot -d locale

Update tool configuration
-------------------------

If you use a translation tool, whenever a new PO file is added, you must update its configuration.

.. tab-set::

   .. tab-item:: Crowdin
      :sync: crowdin

      Using ``manage.py`` from `data-support <https://github.com/open-contracting/data-support/blob/main/manage.py>`__:

      .. code-block:: bash

         manage.py update-crowdinyml-files

   .. tab-item:: Transifex
      :sync: tx

      See `Adding resources in bulk <https://developers.transifex.com/docs/cli#adding-resources-in-bulk>`__.

Translate with a tool
---------------------

Push the PO files:

.. tab-set::

   .. tab-item:: Crowdin
      :sync: crowdin

      .. code-block:: bash

         crowdin push sources

   .. tab-item:: Transifex
      :sync: tx

      .. code-block:: bash

         tx push -s

If you made local changes to translations, push the translations. For example:

.. tab-set::

   .. tab-item:: Crowdin
      :sync: crowdin

      .. code-block:: bash

         crowdin push translations -l en

   .. tab-item:: Transifex
      :sync: tx

      .. code-block:: bash

         tx push -t -l en

When ready, pull the translations from Transifex with:

.. tab-set::

   .. tab-item:: Crowdin
      :sync: crowdin

      .. code-block:: bash

         crowdin pull translations

   .. tab-item:: Transifex
      :sync: tx

      .. code-block:: bash

         tx pull -f -a

Compile the PO files to MO files
--------------------------------

.. tab-set::

   .. tab-item:: Django
      :sync: django

      .. code-block:: bash

         python manage.py compilemessages

   .. tab-item:: Sphinx
      :sync: sphinx

      .. code-block:: bash

         sphinx-intl build -d docs/locale

   .. tab-item:: Python (example)
      :sync: python

      .. code-block:: bash

         pybabel compile -f -d locale

Reference: Django `Translation <https://docs.djangoproject.com/en/4.2/topics/i18n/translation/>`__

.. _i18n-ci:

Continuous integration
----------------------

Repositories that support multiple locales should test that translation files are complete. To do that, the workflow extracts messages, updates catalogs, and then counts incomplete translations.

.. note::

   These workflows only run on ``push`` for the ``main`` branch, so that feature branches don't fail until a PR is created.

Create a ``.github/workflows/i18n.yml`` file.

For a Django application, reuse the `i18n-django <https://github.com/open-contracting/.github/blob/main/.github/workflows/i18n-django.yml>`__ workflow. Change the ``python-version`` to match the version used to compile the :doc:`requirements_dev.txt file<requirements>`.

.. literalinclude:: ../../cookiecutter-django/{{cookiecutter.project_slug}}/.github/workflows/i18n.yml
   :language: yaml

For a Babel project, reuse the `i18n-babel <https://github.com/open-contracting/.github/blob/main/.github/workflows/i18n-babel.yml>`__ workflow. Change the ``command`` as needed:

.. literalinclude:: samples/i18n/babel.yml
   :language: yaml

.. warning::

   If your default branch is not named ``main``, edit the ``push:`` key.

.. note::

   If you use the ``jinja2`` extractor, install ``jinja2`` with ``pip``.
